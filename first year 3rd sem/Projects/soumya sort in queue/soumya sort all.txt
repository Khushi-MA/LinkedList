/*

Question:
Implement a linear queue using structure...
Input: name, sex, age; input: total no of people, their names, sexes, ages.
Output: divide the given names into 3 queues one for male one for female one for senior citizen

Code by Khushi MA
(I have added other gender to the list)
*/

#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<string.h>

#define qsize 1000

struct mainq
{
    char name[100],gender;
    int age;
};
typedef struct mainq DATA;

struct queue
{
    DATA data[qsize];
    int front,rear;
};
typedef struct queue QUEUE ;

void createq(QUEUE*);
void readmainqueue(QUEUE*, int);
void enqueue(QUEUE* , DATA);
DATA dequeue(QUEUE*);
void sortmainqueue(QUEUE*, QUEUE*, QUEUE*, QUEUE*, QUEUE *);
void display(QUEUE);
int emptyq(QUEUE);

int main()
{
    int N;
    printf("\nEnter number of people in the main queue:   ");
    scanf("%d",&N);
    QUEUE Q, M, F, S, O;    // Q:main queue...M:male...F:female...S:Senior citizen
    createq(&Q);
    createq(&M);
    createq(&F);
    createq(&S);
    createq(&O);
    readmainqueue(&Q,N);
    sortmainqueue(&Q,&M,&F,&S,&O);
    printf("\n\nSenior citizen:");
    displayq(S);
    printf("\n\nFemale:");
    displayq(F);
    printf("\n\nMale:");
    displayq(M);
    printf("\n\nOther:");
    displayq(O);
    printf("\n\n");
    return 0;
}

void readmainqueue(QUEUE *A, int N)
{
    int i;
    DATA readdetail;                   //  details about one person in main queue

    for(i=0;i<N;i++)                     // reading details n times
    {
        printf("\nEnter details (person %d):\nName(without space):  ",1+i);
        scanf("%s",readdetail.name);
        printf("Age:  ");
        scanf("%d",&readdetail.age);
        printf("Gender (F-female || M-male || O-other):  ");
        scanf("%c",&readdetail.gender);
        readdetail.gender=getchar();              // to get character
        enqueue(A,readdetail);
    }
    return;
}

void enqueue(QUEUE *A, DATA data)
{
    A->rear=A->rear+1;
    A->data[A->rear]=data;
    return;
}

void createq(QUEUE *A)
{
    A->rear=-1;
    A->front=0;
    return;
}

DATA dequeue(QUEUE *A)
{
    DATA value=A->data[A->front];
    int i;
    for(i=0;i!=A->rear;i++)
    {
        A->data[i]=A->data[i+1];
    }
    // free(A->data[A->rear]);
    A->rear=A->rear-1;
    return value;
}

void sortmainqueue(QUEUE *A, QUEUE *M, QUEUE *F, QUEUE *S,QUEUE *O)
{
    DATA person;
    int unknown=0;
    while(A->rear!=-1)
    {
        person=dequeue(A);

        if(person.age <=0)
            unknown++;

        else if (person.age < 60)
        {
            switch(person.gender)
            {
                case 'M':
                case 'm': enqueue(M,person);
                break;

                case 'F':
                case 'f': enqueue(F,person);
                break;

                case 'O':
                case 'o': enqueue(O,person);

                default: unknown++;
                    break;
            }
        }

        else
            enqueue(S,person);

    }
    printf("\n\n%d member's age or gender (F, M, or O) entered incorrect\n",unknown);
    return;
}

void displayq(QUEUE A)
{
    if(emptyq(A))
    {
        printf("\nQueue is empty.");
        return;
    }
    int i;
    printf("\nName\tAge");
    if(A.data[A.front].age>=60)
    printf("\tGender");
    for(i=0;i<=A.rear;i++)
    {
        printf("\n%s\t%d",A.data[i].name,A.data[i].age);       // you can dequeue and display

        if(A.data[A.front].age>=60)
            printf("\t%c",toupper(A.data[i].gender));
    }
    return;
}

int emptyq (QUEUE A)
{
    if(A.rear==-1)
        return 1;

    else
        return 0;
}

